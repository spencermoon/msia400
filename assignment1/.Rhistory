data.frame(resp, tm)
library(dplyr)
cal_SS_Treatment_df = a %>%
group_by(tm) %>%
summarise(sum_resp=sum(resp), count=n()) %>%
mutate(sst=sum_resp^2/count)
a = data.frame(resp, tm)
al_SS_Treatment_df = a %>%
group_by(tm) %>%
summarise(sum_resp=sum(resp), count=n()) %>%
mutate(sst=sum_resp^2/count)
al_SS_Treatment_df
al_SS_Treatment_df
print(result)
return(f)
myanova <- function(data, label){
k = length(unqiue(label_))
n = len(data)
# Combine data and label
df = data.frame(resp = data, group = label)
sstdf = df %>%
group_by(label) %>%
summarise(sum = sum(resp), count = n()) %>%
mutate(sst = sum^2/count)
totalss = sum(data^2) - (sum(data)^2)/length(data)
sst = sum(sstdf$sst) - (sum(data)^2)/length(data)
sse = totalss - sst
mst = sst/(k-1)
mse = sse/(n-k)
f = mst/mse
p= 1-pf(f, df1 = (k-1), df2 = (n-k))
result = ifelse(p < 0.01,
paste('Reject null hypothesis at a = 0.01 with p-value', p),
paste('Do not reject null hypothesis at a = 0.01 with p-value', p))
#print(result)
return(f)
}
# an example using data “Tensile.txt”
tensile <-read.table("Tensile.txt", header=T)
resp <- c(t(as.matrix(tensile)))
treats <- c("HC5","HC10","HC15","HC20")
k <- 4
n <- 6
tm <- gl(k,1,n*k,factor(treats))
print(my_anova(resp, tm))
print(myanova(resp, tm))
sstdf = df %>%
group_by(label) %>%
summarise(sum = sum(resp), count = n()) %>%
mutate(sst = sum^2/count)
totalss = sum(data^2) - (sum(data)^2)/length(data)
print(myanova(resp, tm))
library(dplyr)
myanova <- function(data, label){
k = length(unique(label_))
n = len(data)
# Manupulate inputs for calculations
sstdf = data.frame(resp = data, group = label) %>%
group_by(label) %>%
dplyr::summarise(sum = sum(resp), count = n()) %>%
dplyr::mutate(sst = sum^2/count)
totalss = sum(data^2) - (sum(data)^2)/length(data)
sst = sum(sstdf$sst) - (sum(data)^2)/length(data)
sse = totalss - sst
mst = sst/(k-1)
mse = sse/(n-k)
f = mst/mse
p= 1-pf(f, df1 = (k-1), df2 = (n-k))
result = ifelse(p < 0.01,
paste('Reject null hypothesis at a = 0.01 with p-value', p),
paste('Do not reject null hypothesis at a = 0.01 with p-value', p))
#print(result)
return(f)
}
# an example using data “Tensile.txt”
tensile <- read.table("Tensile.txt", header=T)
resp <- c(t(as.matrix(tensile)))
treats <- c("HC5", "HC10", "HC15", "HC20")
k <- 4
n <- 6
tm <- gl(k, 1, n*k, factor(treats))
print(myanova(resp, tm))
library(dplyr)
myanova <- function(data, label){
k = length(unique(label))
n = len(data)
# Manupulate inputs for calculations
sstdf = data.frame(resp = data, group = label) %>%
group_by(label) %>%
dplyr::summarise(sum = sum(resp), count = n()) %>%
dplyr::mutate(sst = sum^2/count)
totalss = sum(data^2) - (sum(data)^2)/length(data)
sst = sum(sstdf$sst) - (sum(data)^2)/length(data)
sse = totalss - sst
mst = sst/(k-1)
mse = sse/(n-k)
f = mst/mse
p= 1-pf(f, df1 = (k-1), df2 = (n-k))
result = ifelse(p < 0.01,
paste('Reject null hypothesis at a = 0.01 with p-value', p),
paste('Do not reject null hypothesis at a = 0.01 with p-value', p))
#print(result)
return(f)
}
# an example using data “Tensile.txt”
tensile <- read.table("Tensile.txt", header=T)
resp <- c(t(as.matrix(tensile)))
treats <- c("HC5", "HC10", "HC15", "HC20")
k <- 4
n <- 6
tm <- gl(k, 1, n*k, factor(treats))
print(myanova(resp, tm))
library(dplyr)
myanova <- function(data, label){
k = length(unique(label))
n = length(data)
# Manupulate inputs for calculations
sstdf = data.frame(resp = data, group = label) %>%
group_by(label) %>%
dplyr::summarise(sum = sum(resp), count = n()) %>%
dplyr::mutate(sst = sum^2/count)
totalss = sum(data^2) - (sum(data)^2)/length(data)
sst = sum(sstdf$sst) - (sum(data)^2)/length(data)
sse = totalss - sst
mst = sst/(k-1)
mse = sse/(n-k)
f = mst/mse
p= 1-pf(f, df1 = (k-1), df2 = (n-k))
result = ifelse(p < 0.01,
paste('Reject null hypothesis at a = 0.01 with p-value', p),
paste('Do not reject null hypothesis at a = 0.01 with p-value', p))
#print(result)
return(f)
}
# an example using data “Tensile.txt”
tensile <- read.table("Tensile.txt", header=T)
resp <- c(t(as.matrix(tensile)))
treats <- c("HC5", "HC10", "HC15", "HC20")
k <- 4
n <- 6
tm <- gl(k, 1, n*k, factor(treats))
print(myanova(resp, tm))
library(dplyr)
myanova <- function(data, label){
k = length(unique(label))
n = length(data)
# Manupulate inputs for calculations
sstdf = data.frame(resp = data, group = label) %>%
group_by(label) %>%
summarise(sum = sum(resp), count = n()) %>%
mutate(sst = sum^2/count)
totalss = sum(data^2) - (sum(data)^2)/length(data)
sst = sum(sstdf$sst) - (sum(data)^2)/length(data)
sse = totalss - sst
mst = sst/(k-1)
mse = sse/(n-k)
f = mst/mse
p= 1-pf(f, df1 = (k-1), df2 = (n-k))
result = ifelse(p < 0.01,
paste('Reject null hypothesis at a = 0.01 with p-value', p),
paste('Do not reject null hypothesis at a = 0.01 with p-value', p))
#print(result)
return(f)
}
# Run an example using Tensile dataset
tensile <- read.table("Tensile.txt", header=T)
resp <- c(t(as.matrix(tensile)))
treats <- c("HC5", "HC10", "HC15", "HC20")
k <- 4
n <- 6
tm <- gl(k, 1, n*k, factor(treats))
print(myanova(resp, tm))
library(dplyr)
myanova <- function(data, label){
k = length(unique(label))
n = length(data)
# Manupulate inputs for calculations
sstdf = data.frame(data = data, label = label) %>%
group_by(label) %>%
summarise(sum = sum(resp), count = n()) %>%
mutate(sst = sum^2/count)
totalss = sum(data^2) - (sum(data)^2)/length(data)
sst = sum(sstdf$sst) - (sum(data)^2)/length(data)
sse = totalss - sst
mst = sst/(k-1)
mse = sse/(n-k)
f = mst/mse
p= 1-pf(f, df1 = (k-1), df2 = (n-k))
result = ifelse(p < 0.01,
paste('Reject null hypothesis at a = 0.01 with p-value', p),
paste('Do not reject null hypothesis at a = 0.01 with p-value', p))
#print(result)
return(f)
}
# Run an example using Tensile dataset
tensile <- read.table("Tensile.txt", header=T)
resp <- c(t(as.matrix(tensile)))
treats <- c("HC5", "HC10", "HC15", "HC20")
k <- 4
n <- 6
tm <- gl(k, 1, n*k, factor(treats))
print(myanova(resp, tm))
print(myanova(resp, tm))
print(aov(resp, tm))
print(myanova(resp, tm))
print(aov(resp ~ tm))
print(my_anova(resp, tm))
my_anova <- function(data, group){
### It is a function that calculate one-way anova, which is a technique that can be used to compare means of two or more samples ###
# calculate SS_Total
SS_Total = sum(data^2)-(sum(data)^2)/length(data)
# calculate SS_Treatment
anova_df= data.frame(resp=data, group=group)
cal_SS_Treatment_df = anova_df %>%
group_by(group) %>%
dplyr::summarise(sum_resp=sum(resp), count=n()) %>%
dplyr::mutate(sst=sum_resp^2/count)
SS_Treatment = sum(cal_SS_Treatment_df$sst)-(sum(data)^2)/length(data)
# calculate SS_Error
SS_Error = SS_Total-SS_Treatment
# calculate MS_Treatment
k=length(unique(group))
MS_Treatment = SS_Treatment/(k-1)
# calculate MS_Error
N=length(data)
MS_Error = SS_Error/(N-k)
# calculate F-statistics
f_statistics = MS_Treatment/MS_Error
# calculate p value of F-statistics
p_value= 1-pf(f_statistics, df1=(k-1), df2=(N-k))
result = ifelse(p_value<0.01,
paste('Reject null hypothesis at significance level 0.01 with p-value',p_value),
paste('Do not reject null hypothesis at significance level 0.01',p_value))
return(result)
}
# an example using data “Tensile.txt”
tensile <-read.table("Tensile.txt", header=T)
resp <- c(t(as.matrix(tensile)))
treats <- c("HC5","HC10","HC15","HC20")
k <- 4
n <- 6
tm <- gl(k,1,n*k,factor(treats))
print(my_anova(resp, tm))
my_anova <- function(data, group){
### It is a function that calculate one-way anova, which is a technique that can be used to compare means of two or more samples ###
# calculate SS_Total
SS_Total = sum(data^2)-(sum(data)^2)/length(data)
# calculate SS_Treatment
anova_df= data.frame(resp=data, group=group)
cal_SS_Treatment_df = anova_df %>%
group_by(group) %>%
dplyr::summarise(sum_resp=sum(resp), count=n()) %>%
dplyr::mutate(sst=sum_resp^2/count)
SS_Treatment = sum(cal_SS_Treatment_df$sst)-(sum(data)^2)/length(data)
# calculate SS_Error
SS_Error = SS_Total-SS_Treatment
# calculate MS_Treatment
k=length(unique(group))
MS_Treatment = SS_Treatment/(k-1)
# calculate MS_Error
N=length(data)
MS_Error = SS_Error/(N-k)
# calculate F-statistics
f_statistics = MS_Treatment/MS_Error
# calculate p value of F-statistics
p_value= 1-pf(f_statistics, df1=(k-1), df2=(N-k))
result = ifelse(p_value<0.01,
paste('Reject null hypothesis at significance level 0.01 with p-value',p_value),
paste('Do not reject null hypothesis at significance level 0.01',p_value))
return(f)
}
# an example using data “Tensile.txt”
tensile <-read.table("Tensile.txt", header=T)
resp <- c(t(as.matrix(tensile)))
treats <- c("HC5","HC10","HC15","HC20")
k <- 4
n <- 6
tm <- gl(k,1,n*k,factor(treats))
print(my_anova(resp, tm))
my_anova <- function(data, group){
### It is a function that calculate one-way anova, which is a technique that can be used to compare means of two or more samples ###
# calculate SS_Total
SS_Total = sum(data^2)-(sum(data)^2)/length(data)
# calculate SS_Treatment
anova_df= data.frame(resp=data, group=group)
cal_SS_Treatment_df = anova_df %>%
group_by(group) %>%
dplyr::summarise(sum_resp=sum(resp), count=n()) %>%
dplyr::mutate(sst=sum_resp^2/count)
SS_Treatment = sum(cal_SS_Treatment_df$sst)-(sum(data)^2)/length(data)
# calculate SS_Error
SS_Error = SS_Total-SS_Treatment
# calculate MS_Treatment
k=length(unique(group))
MS_Treatment = SS_Treatment/(k-1)
# calculate MS_Error
N=length(data)
MS_Error = SS_Error/(N-k)
# calculate F-statistics
f_statistics = MS_Treatment/MS_Error
# calculate p value of F-statistics
p_value= 1-pf(f_statistics, df1=(k-1), df2=(N-k))
result = ifelse(p_value<0.01,
paste('Reject null hypothesis at significance level 0.01 with p-value',p_value),
paste('Do not reject null hypothesis at significance level 0.01',p_value))
return(f_statistics)
}
# an example using data “Tensile.txt”
tensile <-read.table("Tensile.txt", header=T)
resp <- c(t(as.matrix(tensile)))
treats <- c("HC5","HC10","HC15","HC20")
k <- 4
n <- 6
tm <- gl(k,1,n*k,factor(treats))
print(my_anova(resp, tm))
library(dplyr)
myanova <- function(data, label){
k = length(unique(label))
n = length(data)
# Manupulate inputs for calculations
sstdf = data.frame(data = data, label = label) %>%
group_by(label) %>%
summarise(sum = sum(data), count = n()) %>%
mutate(sst = sum^2/count)
totalss = sum(data^2) - (sum(data)^2)/length(data)
sst = sum(sstdf$sst) - (sum(data)^2)/length(data)
sse = totalss - sst
mst = sst/(k-1)
mse = sse/(n-k)
f = mst/mse
p= 1-pf(f, df1 = (k-1), df2 = (n-k))
result = ifelse(p < 0.01,
paste('Reject null hypothesis at a = 0.01 with p-value', p),
paste('Do not reject null hypothesis at a = 0.01 with p-value', p))
#print(result)
return(f)
}
# Run an example using Tensile dataset
tensile <- read.table("Tensile.txt", header=T)
resp <- c(t(as.matrix(tensile)))
treats <- c("HC5", "HC10", "HC15", "HC20")
k <- 4
n <- 6
tm <- gl(k, 1, n*k, factor(treats))
print(myanova(resp, tm))
print(aov(resp ~ tm))
my_anova <- function(data, group){
### It is a function that calculate one-way anova, which is a technique that can be used to compare means of two or more samples ###
# calculate SS_Total
SS_Total = sum(data^2)-(sum(data)^2)/length(data)
# calculate SS_Treatment
anova_df= data.frame(resp=data, group=group)
cal_SS_Treatment_df = anova_df %>%
group_by(group) %>%
dplyr::summarise(sum_resp=sum(resp), count=n()) %>%
dplyr::mutate(sst=sum_resp^2/count)
SS_Treatment = sum(cal_SS_Treatment_df$sst)-(sum(data)^2)/length(data)
# calculate SS_Error
SS_Error = SS_Total-SS_Treatment
# calculate MS_Treatment
k=length(unique(group))
MS_Treatment = SS_Treatment/(k-1)
# calculate MS_Error
N=length(data)
MS_Error = SS_Error/(N-k)
# calculate F-statistics
f_statistics = MS_Treatment/MS_Error
# calculate p value of F-statistics
p_value= 1-pf(f_statistics, df1=(k-1), df2=(N-k))
result = ifelse(p_value<0.01,
paste('Reject null hypothesis at significance level 0.01 with p-value',p_value),
paste('Do not reject null hypothesis at significance level 0.01',p_value))
return(result)
}
# an example using data “Tensile.txt”
tensile <-read.table("Tensile.txt", header=T)
resp <- c(t(as.matrix(tensile)))
treats <- c("HC5","HC10","HC15","HC20")
k <- 4
n <- 6
tm <- gl(k,1,n*k,factor(treats))
print(my_anova(resp, tm))
print(my_anova(resp, tm))
library(dplyr)
myanova <- function(data, label){
k = length(unique(label))
n = length(data)
# Manupulate inputs for calculations
sstdf = data.frame(data = data, label = label) %>%
group_by(label) %>%
summarise(sum = sum(data), count = n()) %>%
mutate(sst = sum^2/count)
totalss = sum(data^2) - (sum(data)^2)/length(data)
sst = sum(sstdf$sst) - (sum(data)^2)/length(data)
sse = totalss - sst
mst = sst/(k-1)
mse = sse/(n-k)
f = mst/mse
p= 1-pf(f, df1 = (k-1), df2 = (n-k))
result = ifelse(p < 0.01,
paste('Reject null hypothesis at a = 0.01 with p-value =', p),
paste('Do not reject null hypothesis at a = 0.01 with p-value =', p))
print(result)
return(f)
}
# Run an example using Tensile dataset
tensile <- read.table("Tensile.txt", header=T)
resp <- c(t(as.matrix(tensile)))
treats <- c("HC5", "HC10", "HC15", "HC20")
k <- 4
n <- 6
tm <- gl(k, 1, n*k, factor(treats))
print(myanova(resp, tm))
library(dplyr)
myanova <- function(data, label){
k = length(unique(label))
n = length(data)
# Manupulate inputs for calculations
sstdf = data.frame(data = data, label = label) %>%
group_by(label) %>%
summarise(sum = sum(data), count = n()) %>%
mutate(sst = sum^2/count)
totalss = sum(data^2) - (sum(data)^2)/length(data)
sst = sum(sstdf$sst) - (sum(data)^2)/length(data)
sse = totalss - sst
mst = sst/(k-1)
mse = sse/(n-k)
f = mst/mse
p= 1-pf(f, df1 = (k-1), df2 = (n-k))
result = ifelse(p < 0.01,
paste('Reject null hypothesis at a = 0.01 with p-value =', p),
paste('Do not reject null hypothesis at a = 0.01 with p-value =', p))
print(result)
return('F =', f)
}
# Run an example using Tensile dataset
tensile <- read.table("Tensile.txt", header=T)
resp <- c(t(as.matrix(tensile)))
treats <- c("HC5", "HC10", "HC15", "HC20")
k <- 4
n <- 6
tm <- gl(k, 1, n*k, factor(treats))
print(myanova(resp, tm))
myanova <- function(data, label){
k = length(unique(label))
n = length(data)
# Manupulate inputs for calculations
sstdf = data.frame(data = data, label = label) %>%
group_by(label) %>%
summarise(sum = sum(data), count = n()) %>%
mutate(sst = sum^2/count)
totalss = sum(data^2) - (sum(data)^2)/length(data)
sst = sum(sstdf$sst) - (sum(data)^2)/length(data)
sse = totalss - sst
mst = sst/(k-1)
mse = sse/(n-k)
f = mst/mse
p= 1-pf(f, df1 = (k-1), df2 = (n-k))
result = ifelse(p < 0.01,
paste('Reject null hypothesis at a = 0.01 with p-value =', p),
paste('Do not reject null hypothesis at a = 0.01 with p-value =', p))
print(result)
return(f)
}
library(dplyr)
myanova <- function(data, label){
k = length(unique(label))
n = length(data)
# Manupulate inputs for calculations
sstdf = data.frame(data = data, label = label) %>%
group_by(label) %>%
summarise(sum = sum(data), count = n()) %>%
mutate(sst = sum^2/count)
totalss = sum(data^2) - (sum(data)^2)/length(data)
sst = sum(sstdf$sst) - (sum(data)^2)/length(data)
sse = totalss - sst
mst = sst/(k-1)
mse = sse/(n-k)
f = mst/mse
p = 1-pf(f, df1 = (k-1), df2 = (n-k))
result = ifelse(p < 0.01,
paste('Reject null hypothesis at a = 0.01 with p-value =', p),
paste('Do not reject null hypothesis at a = 0.01 with p-value =', p))
print(result)
return(f)
}
# Run an example using Tensile dataset
tensile <- read.table("Tensile.txt", header=T)
resp <- c(t(as.matrix(tensile)))
treats <- c("HC5", "HC10", "HC15", "HC20")
k <- 4
n <- 6
tm <- gl(k, 1, n*k, factor(treats))
myanova(resp, tm)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
labdata <- read_tsv("labdata.txt")
reg <- lm(y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8, labdata)
summary(reg)
attach(labdata)
plot(x1, y)
#plot(x2, y)
#plot(x3, y)
#plot(x4, y)
#plot(x5, y)
#plot(x6, y)
#plot(x7, y)
#plot(x8, y)
avg = mean(x1)
avg
reg.piece <- lm(y ~ (x1<avg)*x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8, labdata)
summary(reg.piece)
